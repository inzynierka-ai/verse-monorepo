from typing import Optional, Callable, Awaitable
from pydantic import BaseModel

from app.services.game_engine.tools.world_generator import WorldGenerator
from app.services.game_engine.tools.character_generator import CharacterGenerator
from app.schemas.world_generation import (
    WorldGenerationInput,
    World,
    Character
)


class InitialGameState(BaseModel):
    """
    Initial state of a game, containing just the world and player character.
    This is the minimal state needed to start a game before any scenes are generated.
    """
    world: World
    playerCharacter: Character


class GameInitializer:
    """
    Service that coordinates the initial game setup process.
    
    This service acts as the entry point for starting a new game, taking minimal user input
    and transforming it into a fully realized game world with a player character. It follows
    the principle of generating only what's necessary to begin the game, allowing the
    Story Controller and Scene Director to dynamically expand the world as needed.
    
    The GameInitializer delegates the actual generation work to specialized services:
    - WorldGenerator for creating the world description and rules
    - CharacterGenerator for creating the detailed player character
    
    This service doesn't create NPCs or locations beyond the player character and world
    description, as these will be dynamically generated by the Scene Director as needed
    during gameplay.
    
    Usage flow:
    1. User provides WorldGenerationInput with basic world parameters and character draft
    2. GameInitializer coordinates generation of complete world and player character
    3. InitialGameState is returned and passed to Story Controller
    4. Story Controller uses this as the foundation for scene generation
    
    This approach enables a more dynamic, player-driven experience where the world
    expands organically in response to player choices.
    """
    def __init__(
        self,
        world_generator: Optional[WorldGenerator] = None,
        character_generator: Optional[CharacterGenerator] = None
    ):
        self.world_generator = world_generator or WorldGenerator()
        self.character_generator = character_generator or CharacterGenerator()
    
    async def initialize_game(
        self, 
        user_input: WorldGenerationInput,
        on_world_generated: Optional[Callable[[World], Awaitable[None]]] = None,
        on_character_generated: Optional[Callable[[Character], Awaitable[None]]] = None
    ) -> InitialGameState:
        """
        Creates the initial game state from user input.
        
        Args:
            user_input: User input containing world parameters and player character draft
            on_world_generated: Optional callback called immediately after world generation
            on_character_generated: Optional callback called immediately after character generation
            
        Returns:
            InitialGameState with generated world and player character
        """
        # 1. Generate the world first
        world = await self.world_generator.generate_world(user_input.world)
        
        # Call the callback if provided
        if on_world_generated:
            await on_world_generated(world)
        
        # 2. Generate the player character within the context of the world
        player_character = await self.character_generator.generate_character(
            user_input.playerCharacter,
            world,
            is_player=True
        )
        
        # Call the callback if provided
        if on_character_generated:
            await on_character_generated(player_character)
        
        # 3. Return the initial game state
        return InitialGameState(
            world=world,
            playerCharacter=player_character
        ) 