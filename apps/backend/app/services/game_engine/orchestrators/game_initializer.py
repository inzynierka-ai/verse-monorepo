from typing import Optional, Callable, Awaitable
from pydantic import BaseModel
from sqlalchemy.orm import Session

from app.services.game_engine.tools.story_generator import StoryGenerator
from app.services.game_engine.tools.character_generator import CharacterGenerator
from app.schemas.story_generation import (
    StoryGenerationInput,
    Story,
    Character
)


class InitialGameState(BaseModel):
    """
    Initial state of a game, containing just the story and player character.
    This is the minimal state needed to start a game before any scenes are generated.
    """
    story: Story
    playerCharacter: Character


class GameInitializer:
    """
    Service that coordinates the initial game setup process.
    
    This service acts as the entry point for starting a new game, taking minimal user input
    and transforming it into a fully realized game story with a player character. It follows
    the principle of generating only what's necessary to begin the game, allowing the
    Story Controller and Scene Director to dynamically expand the story as needed.
    
    The GameInitializer delegates the actual generation work to specialized services:
    - StoryGenerator for creating the story description and rules
    - CharacterGenerator for creating the detailed player character
    
    This service doesn't create NPCs or locations beyond the player character and story
    description, as these will be dynamically generated by the Scene Director as needed
    during gameplay.
    
    Usage flow:
    1. User provides StoryGenerationInput with basic story parameters and character draft
    2. GameInitializer coordinates generation of complete story and player character
    3. InitialGameState is returned and passed to Story Controller
    4. Story Controller uses this as the foundation for scene generation
    
    This approach enables a more dynamic, player-driven experience where the story
    expands organically in response to player choices.
    """
    def __init__(
        self,
        story_generator: Optional[StoryGenerator] = None,
        character_generator: Optional[CharacterGenerator] = None,
        db_session: Optional[Session] = None
    ):
        self.story_generator = story_generator or StoryGenerator()
        self.character_generator = character_generator or CharacterGenerator(db_session=db_session)
        self.db_session = db_session
    
    async def initialize_game(
        self, 
        user_input: StoryGenerationInput,
        on_story_generated: Optional[Callable[[Story], Awaitable[None]]] = None,
        on_character_generated: Optional[Callable[[Character], Awaitable[None]]] = None,
        story_id: Optional[int] = None
    ) -> InitialGameState:
        """
        Creates the initial game state from user input.
        
        Args:
            user_input: User input containing story parameters and player character draft
            on_story_generated: Optional callback called immediately after story generation
            on_character_generated: Optional callback called immediately after character generation
            story_id: Optional ID of the story to associate characters with
            
        Returns:
            InitialGameState with generated story and player character
        """
        # 1. Generate the story first
        story = await self.story_generator.generate_story(user_input.story)
        
        # Call the callback if provided
        if on_story_generated:
            await on_story_generated(story)
        
        # 2. Generate the player character within the context of the story
        player_character = await self.character_generator.generate_character(
            user_input.playerCharacter,
            story,
            is_player=True,
            story_id=story.id
        )
        
        # Call the callback if provided
        if on_character_generated:
            await on_character_generated(player_character)
        
        # 3. Return the initial game state
        return InitialGameState(
            story=story,
            playerCharacter=player_character
        ) 